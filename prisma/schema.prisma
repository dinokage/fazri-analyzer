// schema.prisma (Corrected and Aligned with NextAuth.js expectations)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  STAFF
  FACULTY
  SUPER_ADMIN
}

// ==========================================================
// THE MAIN USER MODEL FOR YOUR APPLICATION (renamed back to `User`)
// ==========================================================
model User { // <<< RENAMED from 'Entity' to 'User'
  id            String    @id @default(cuid())
  entity_id     String    @unique
  name          String?
  role          UserRole
  email         String?   @unique
  department    String?
  student_id    String?
  staff_id      String?
  card_id       String?
  device_hash   String?   @unique
  face_id       String?   @unique

  password      String // Hashed password
  // Add these if you want to keep them from default NextAuth.js User model structure:
  emailVerified DateTime?
  image         String?

  accounts      Account[] // Now links to this User model
  sessions      Session[] // Now links to this User model
}

// ==========================================================
// NEXTAUTH.JS MODELS - NOW CORRECTLY REFERENCING 'USER'
// ==========================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  // Corrected: Relation points to `User` (and name is 'user')
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // <<< CHANGED from 'entity' to 'user'

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // Corrected: Relation points to `User` (and name is 'user')
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // <<< CHANGED from 'entity' to 'user'
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}